############################################## 
#	General SDK configuration properties 
##############################################  
# Set to true to use public/BIS push; false to use enterprise/BES push

# @deprecated As of version 1.1 the SDK can run in public/BIS and enterprise/BES mode simultaneously. 
# Instead, when using the low-level PAP APIs, set the usingPublicPush boolean on the PapControl accordingly. 
# When using the high-level APIs, set the "type" for the PushApplication (see PushApplicationType) and ensure 
# subscribers have their type set to public or enterprise and the SDK will handle sending the XML to the appropriate PPG.
#
# IMPORTANT: For backwards compatibility, if using version 1.0.1 of the SDK or lower, uncomment one of the two settings directly below. 
use.public.push=true
#use.public.push=false

# List of parser special characters that should be avoided when specifying values of PAP message elements.
# For example, the characters below are not allowed for the pushId element of the PAP XML.
parser.special.characters=&":<

# Type of storage used to persist data; value is:
# "RDBMS" to store all data in a database; or
# "Memory" to store all data in memory, plus persist push application and subscriber data to local files
dao.type=RDBMS
#dao.type=Memory

# DTD declaration to use when constructing XML to send to the public/BIS PPG (this property is not related to parsing XML sent from the PPG).
# Important: This property should not be changed unless the PPG changes the DTD it is using first!
dtd.declaration.public=<!DOCTYPE pap PUBLIC "-//WAPFORUM//DTD PAP 2.1//EN" "http://www.openmobilealliance.org/tech/DTD/pap_2.1.dtd">

# DTD declaration to use when constructing XML to send to the enterprise/BES PPG (this property is not related to parsing XML sent from the PPG).
# Important: This property should not be changed unless the PPG changes the DTD it is using first!
dtd.declaration.enterprise=<!DOCTYPE pap PUBLIC "-//WAPFORUM//DTD PAP 2.0//EN" "http://www.wapforum.org/DTD/pap_2.0.dtd" [<?wap-pap-ver supported-versions="2.0,1.*"?>]>

############################################## 
#	Database configuration properties 
##############################################
# Defines the type of database that the SDK is working with. The options are: mysql, oracle.
database.type=mysql

# Datasource configuration 
# Driver class to use: eg. MySQL: com.mysql.jdbc.Driver eg. Oracle: oracle.jdbc.driver.OracleDriver  
driver.class.name=${bpss.driver.class.name}

# Connection URL to the database: eg. MySQL: jdbc:mysql://localhost:3306/pushsdk eg. Oracle: jdbc:oracle:thin:@localhost:1522:pushsdk
db.connection.url=${bpss.db.connection.url}

db.username=${bpss.db.username}
db.password=${bpss.db.password}
db.initialSize=${bpss.db.initialSize}
db.maxActive=${bpss.db.maxActive}
db.maxIdle=${bpss.db.maxIdle}
db.maxWait=${bpss.db.maxWait}
# When a database server reboots, or there is a network failure, all the connections in the connection pool are broken and this normally requires an 
# Application Server reboot. However, the Commons DBCP (Database Connection Pool) which is used by the Push Service SDK can validate connections 
# by running a simple SQL query, and if a broken connection is detected, a new one is created to replace it. Connections can be validated before or 
# after using them or when they are idle. To do the validation,  you will need to set the appropriate property (db.testOnBorrow, db.testOnReturn
# or db.testWhileIdle) to true and validationQuery=xxx options.  
# Please note, that setting the validationQuery option on the database connection pool will have a negative performance impact.
# Eg: MySQL validationQuery=select 1
# Eg: Oracle validationQuery=select 1 from dual
db.testOnBorrow=${bpss.db.testOnBorrow}
db.validationQuery=${bpss.db.validationQuery}
db.testOnReturn=${bpss.db.testOnReturn}
db.testWhileIdle=${bpss.db.testWhileIdle}
# The following property sets the number of milliseconds to sleep between runs of the idle object evictor thread. 
# When non-positive, no idle object evictor thread will be run. 
db.timeBetweenEvictionRunsMillis=${bpss.db.timeBetweenEvictionRunsMillis}
# The number of objects to examine during each run of the idle object evictor thread (if any). 
db.numTestsPerEvictionRun=${bpss.db.numTestsPerEvictionRun}
# The minimum amount of time in milliseconds an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any). 
db.minEvictableIdleTimeMillis=${bpss.db.minEvictableIdleTimeMillis}

# Maximum number of SQL IN clause parameters allowed by the DB implementation being used (i.e. Oracle limit is 1000)
max.in.clause.values=1000
      
##############################################
#	Push management configuration properties
##############################################
# Push submission URL of the PPG (public/BIS or BES/MDS central push server)
# @deprecated As of version 1.1 the SDK can run in public/BIS and enterprise/BES mode simultaneously.  Use public.ppg.address and/or enterprise.ppg.address. 
#ppg.address=${ppg.base.url}/mss/PD_pushRequest

# Push submission URL of the public/BIS push server. If you are not using a public/BIS PPG, this value should not be set.
public.ppg.address=${ppg.base.url}/mss/PD_pushRequest

# Push submission URL of the enterprise/BES central push server. If you are not using an enterprise/BES PPG, this value should not be set.
enterprise.ppg.address=${bes.ppg.base.url}/pap

# Maximum number of attempts to generate a unique push id before giving up
regenerate.pushid.max.attempts=5

# The default deliver before timestamp is the current time plus this offset in milliseconds.
# NOTE: This is only used in the low-level PAP component, if no expiry date is specified through the API. 
# The high-level push uses the push application's defaultPushLiveTime, if not specified in the API through PushParameters.
default.deliver.before.timestamp.offset=3600000

# The max. number of results returned by a push request detail find operation. Making this value too large may exceed available system memory.
push.request.detail.find.max.results=100000

# The frequency (in seconds) with which push statistics are updated in storage.  All counts and content sums will be kept in memory until
# a batch update is done to storage at the specified interval.  As a result, there might be slight inconsistencies in the stats until
# the update takes place.  Setting a larger value for this property increases the chances for inconsistency.  Setting a smaller value 
# guarantees more regular updates, but will impact performance more significantly.
push.stats.update.frequency=120

# The max. number of push statistics in the queue waiting to be sent for a batch update. 
# If the queue has reached its max. size, it will block until the size of the queue goes down again.
push.stats.update.queuesize=100000

########################################################### 
# 	Push application management configuration properties 
###########################################################
# Queue size to use during unsubscribes for a hard application delete.  
# The queue will block and wait if the threads working on the unsubscribes cannot keep up with the queue filling up.
pushapp.delete.unsubscribe.queuesize=100000

# The amount of time to wait (in minutes) for the deletion of subscribers
# for a hard application delete before timing out and throwing an exception.
pushapp.subscriber.delete.timeout=30

############################################## 
# 	Subscription configuration properties 
##############################################
# Subscriber Deregistration URL for public/BIS push
# Note: If you are not using a public/BIS PPG, this value should not be set.
subscription.deregistration.url=${ppg.sub.base.url}/mss/PD_cpDeregUser?pin=

# Suspend Subscription URL for public/BIS push
# Note: If you are not using a public/BIS PPG, this value should not be set.
subscription.suspend.url=${ppg.sub.base.url}/mss/PD_cpSub?cpAction=suspend&pin=

# Resume Subscription URL for public/BIS push
# Note: If you are not using a public/BIS PPG, this value should not be set.
subscription.resume.url=${ppg.sub.base.url}/mss/PD_cpSub?cpAction=resume&pin=

# The amount of time to wait (in minutes) for the unsubscribing of subscribers   
# for a hard application delete before timing out and throwing an exception.
pushapp.delete.unsubscribe.timeout=30

# Subscription query URL for public/BIS push
# Note: If you are not using a public/BIS PPG, this value should not be set.
subscription.query.url=${ppg.sub.base.url}/mss/PD_cpSubQuery

# The max. number of results returned by a subscriber find operation. Making this value too large may exceed available system memory.
subscription.find.max.results=100000

# When the number of subscribers to validate are below this water mark an optimized query for small number of subscribers will be used; 
# conversely when above this number a second optimized query for a large number of subscribers will be used
subscription.validation.high.water.mark=100000

# Number of subscribers to load at once from the database to validate. Making this number too large may exceed available system memory. 
# Making this number too small will decrease performance as more calls to the persistent store will be required.
# Important: This number should never be zero! One must be the minimum value
subscription.validation.batch.size=100000

# Maximum number of threads to use for large subscription validation/subscription matching
subscription.matching.max.threads=5

# Queue size to use for large subscription validation/subscription matching
# The queue will block and wait if the threads working on the subscription validation/matching cannot keep up with the queue filling up.
subscription.matching.queuesize=50000

# When syncing up the status of subscribers with the PPG, the batch size to use for each sync request.
# Important: The max. number of subscribers to include in each sync request is actually defined by the PPG.  
# It is present here in case it changes on the PPG end and has to be updated here on the SDK side. 
# Note: If you are not using a public/BIS PPG, this property will be ignored.
subscription.ppg.sync.batch.size=10000

# Queue size to use for syncing up the status of subscribers with the PPG.
# The queue will block and wait if the threads working on the subscription status syncing cannot keep up with the queue filling up.
# Note: If you are not using a public/BIS PPG, this property will be ignored.
subscription.ppg.sync.queuesize=5000

# The amount of time to wait (in minutes) for the syncing up of the status of subscribers with the PPG before timing out 
# and throwing an exception.
# Note: If you are not using a public/BIS PPG, this property will be ignored.
subscription.ppg.sync.timeout=30

# Maximum number of threads to use for the syncing up of the status of subscribers with the PPG.
# Note: If you are not using a public/BIS PPG, this property will be ignored.
subscription.ppg.sync.threads=5

############################################## 
#	Acknowledgement configuration properties 
##############################################
# Maximum size of the result notification queue before it starts rejecting new notifications
acknowledgement.max.queue.size=100000

# Maximum number of threads processing the internal result notification queue and notifying the listeners
acknowledgement.max.threads=20

# Maximum number of result notifications in a batch for processing
acknowledgement.batch.size=500

# Time in milliseconds to delay, after looking up and not finding the push request detail that corresponds to
# a result notification, before retrying the lookup.
# This property is needed for the case where the result notification has come back before the push request 
# detail has been committed to storage. 
# Note: This property only applies to push applications that have the "store push requests" flag set to true.
acknowledgement.push.lookup.retry.delay=5000

############################################## 
#	HTTP client configuration properties 
##############################################
# Connection timeout in milliseconds
http.connection.timeout=60000

# Read timeout in milliseconds
http.read.timeout=120000

# Whether to use persistent connections (true or false)
http.is.persistent=true
